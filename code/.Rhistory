knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(sp)
library(gstat)
library(raster)
library(tidyverse)
library(spacetime)
library(stringr)
library(readr)
library(leaflet)
library(gridExtra)
library(gifski)
library(nngeo)
# to make the spherical geometry errors go away
sf::sf_use_s2(FALSE)
# BOUNDARIES
# Boulder boundaries
BO_CO = st_read("../GIS_inputs_destruction_fireboundary/Boulder_county_munis/Municipalities.shp")
fire_counties = BO_CO %>%
dplyr::filter(ZONEDESC == "Louisville" |
ZONEDESC == "Superior" |
ZONEDESC == "Broomfield" |
ZONEDESC == "Lafayette" |
ZONEDESC == "Boulder")
# Boulder Boundary
boulder_precincts = st_read("../GIS_inputs_destruction_fireboundary/Unincorporated_Boulder/Unincorporated_Boulder.shp")
# Broomfield Boundary
broomfield_precincts = st_read("../GIS_inputs_destruction_fireboundary/Broomfield_Precincts/Precincts.shp")
# Westminster Boundary
westminster_city = st_read("../GIS_inputs_destruction_fireboundary/Westminster_CityLimits/CityLimits.shp")
# make all the precincts have the same columns (we don't need a lot of the data)
boulder_precincts <- boulder_precincts %>%
select(c(OBJECTID, geometry, SHAPEarea, SHAPElen))
broomfield_precincts <- broomfield_precincts %>%
mutate(SHAPEarea = Shape__Are,
SHAPElen = Shape__Len,
OBJECTID = OBJECTID + 1000) %>% # add 1,000 to the broomfield precincts to get rid of overlapping labels
select(-c("GlobalID", "GIS_ID", "PRECINCT_N", "MAP_COLOR", "USER_COMME", "LAST_UPDAT", "Shape__Are", "Shape__Len"))
westminster_city <- westminster_city %>%
mutate(SHAPEarea = ShapeSTAre,
SHAPElen = ShapeSTLen) %>%
select(c(OBJECTID, geometry, SHAPEarea, SHAPElen))
# save proj string for fire-affected counties to use for other transformations
prg = raster::crs(fire_counties,asText=TRUE)
# all boundaries joined together
all_bounds <- boulder_precincts %>%
rbind(st_transform(broomfield_precincts, crs=prg)) %>%
rbind(st_transform(westminster_city, crs=prg))
# remove the holes that existed so we just have the outside boundary of this area
all_bounds <- all_bounds %>%
st_union() %>%
st_remove_holes()
# Marshall fire boundary
wfigs_fire = st_read("../GIS_inputs_destruction_fireboundary/WFIGS_-_Wildland_Fire_Perimeters_Full_History/FH_Perimeter.shp")
# filter fire to marshall fire only; update crs
marshall_fire = wfigs_fire %>% filter(poly_Incid == "Marshall") %>% st_transform(crs = st_crs(prg))
# BUILDINGS
# Read in destroyed home and building sites
destroyed_homes = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/destroyed_homes.shp")
damaged_homes = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/damaged_homes.shp")
destroyed_businesses = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/destroyed_businesses.shp")
damaged_businesses = st_read("../GIS_inputs_destruction_fireboundary/output_damage_files/damaged_businesses.shp")
# create 'type' column; select only the columns needed; make projection string match
destroyed_homes = destroyed_homes %>%
mutate(type = "destroyed - residential") %>%
dplyr::rename(jurisdiction = JURISDICTI) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
destroyed_businesses = destroyed_businesses %>%
mutate(type = "destroyed - non-residential") %>%
dplyr::rename(jurisdiction = Jurisdicti) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
damaged_homes = damaged_homes %>%
mutate(type = "damaged - residential") %>%
dplyr::rename(jurisdiction = JURISDICTI) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
damaged_business = damaged_businesses %>%
mutate(type = "damaged - non-residential") %>%
dplyr::rename(jurisdiction = Jurisdicti) %>%
dplyr::select(jurisdiction, type, latlong, geometry) %>%
st_transform(crs = st_crs(prg))
# combine into one df, using the "," indicator keeps decimal points
destroyed_damaged = rbind(destroyed_homes,
destroyed_businesses,
damaged_homes,
damaged_business) %>%
separate(latlong, c("lat","long"), ",", convert = FALSE)
# change lat and long to floats
destroyed_damaged$lat = as.double(destroyed_damaged$lat)
destroyed_damaged$long = as.double(destroyed_damaged$long)
ggplot(all_bounds, aes(geometry=geometry)) +
geom_sf() +
geom_sf(data=marshall_fire$geometry, fill="red", alpha=0.6)
ggplot(all_bounds, aes(geometry=geometry)) +
#geom_sf() +
geom_sf(data=marshall_fire$geometry, fill="red", alpha=0.6) #+
# interactive map of damaged/destroyed buildings
# chose not to do icons for destroyed/damaged buildings because the map got really busy
fire_destruction_and_AQ_plot = leaflet() %>%
addTiles() %>%
#addAwesomeMarkers(icon = ~sensorIcon[Location],
#                 lng = sensors$Lon, lat = sensors$Lat) %>%
addCircleMarkers(color = ~pal(destroyed_damaged$type),
radius = 3.5,
opacity = 1,
lng = destroyed_damaged$long, lat = destroyed_damaged$lat) %>%
addLegend("topright", pal = pal, values = ~destroyed_damaged$type,
title = "Fire damage")
